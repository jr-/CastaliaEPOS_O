//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/mac/tstpMac/TSTPMACPacket.msg.
//

#ifndef _TSTPMACPACKET_M_H_
#define _TSTPMACPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "MacPacket_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/mac/tstpMac/TSTPMACPacket.msg:20</tt> by nedtool.
 * <pre>
 * packet TSTPMACPacket extends MacPacket
 * {
 *     char data[127];
 *     int64 netPacketHook;
 * }
 * </pre>
 */
class TSTPMACPacket : public ::MacPacket
{
  protected:
    char data_var[127];
    int64 netPacketHook_var;

  private:
    void copy(const TSTPMACPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TSTPMACPacket&);

  public:
    TSTPMACPacket(const char *name=NULL, int kind=0);
    TSTPMACPacket(const TSTPMACPacket& other);
    virtual ~TSTPMACPacket();
    TSTPMACPacket& operator=(const TSTPMACPacket& other);
    virtual TSTPMACPacket *dup() const {return new TSTPMACPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataArraySize() const;
    virtual char getData(unsigned int k) const;
    virtual void setData(unsigned int k, char data);
    virtual int64 getNetPacketHook() const;
    virtual void setNetPacketHook(int64 netPacketHook);
};

inline void doPacking(cCommBuffer *b, TSTPMACPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TSTPMACPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _TSTPMACPACKET_M_H_

