//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/labile/LabileRoutingPacket.msg.
//

#ifndef _LABILEROUTINGPACKET_M_H_
#define _LABILEROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PacketId_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/routing/labile/LabileRoutingPacket.msg:21</tt> by nedtool.
 * <pre>
 * //id =1
 * packet LabileRREQPacket extends PacketId
 * {
 *     bool flagJ;
 *     bool flagR;
 *     bool flagG;
 *     bool flagD;
 *     bool flagU;
 *     int hopCount;
 *     int weakLinks;
 *     int rreqID;
 *     string sourceLABILE;
 *     unsigned long sourceSeqNum;
 *     unsigned long destinationSeqNum;
 *     string destinationLABILE;
 * }
 * </pre>
 */
class LabileRREQPacket : public ::PacketId
{
  protected:
    bool flagJ_var;
    bool flagR_var;
    bool flagG_var;
    bool flagD_var;
    bool flagU_var;
    int hopCount_var;
    int weakLinks_var;
    int rreqID_var;
    opp_string sourceLABILE_var;
    unsigned long sourceSeqNum_var;
    unsigned long destinationSeqNum_var;
    opp_string destinationLABILE_var;

  private:
    void copy(const LabileRREQPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabileRREQPacket&);

  public:
    LabileRREQPacket(const char *name=NULL, int kind=0);
    LabileRREQPacket(const LabileRREQPacket& other);
    virtual ~LabileRREQPacket();
    LabileRREQPacket& operator=(const LabileRREQPacket& other);
    virtual LabileRREQPacket *dup() const {return new LabileRREQPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getFlagJ() const;
    virtual void setFlagJ(bool flagJ);
    virtual bool getFlagR() const;
    virtual void setFlagR(bool flagR);
    virtual bool getFlagG() const;
    virtual void setFlagG(bool flagG);
    virtual bool getFlagD() const;
    virtual void setFlagD(bool flagD);
    virtual bool getFlagU() const;
    virtual void setFlagU(bool flagU);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getWeakLinks() const;
    virtual void setWeakLinks(int weakLinks);
    virtual int getRreqID() const;
    virtual void setRreqID(int rreqID);
    virtual const char * getSourceLABILE() const;
    virtual void setSourceLABILE(const char * sourceLABILE);
    virtual unsigned long getSourceSeqNum() const;
    virtual void setSourceSeqNum(unsigned long sourceSeqNum);
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
    virtual const char * getDestinationLABILE() const;
    virtual void setDestinationLABILE(const char * destinationLABILE);
};

inline void doPacking(cCommBuffer *b, LabileRREQPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LabileRREQPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/labile/LabileRoutingPacket.msg:36</tt> by nedtool.
 * <pre>
 * //id =5
 * packet LabileHelloMessage extends PacketId
 * {
 * }
 * </pre>
 */
class LabileHelloMessage : public ::PacketId
{
  protected:

  private:
    void copy(const LabileHelloMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabileHelloMessage&);

  public:
    LabileHelloMessage(const char *name=NULL, int kind=0);
    LabileHelloMessage(const LabileHelloMessage& other);
    virtual ~LabileHelloMessage();
    LabileHelloMessage& operator=(const LabileHelloMessage& other);
    virtual LabileHelloMessage *dup() const {return new LabileHelloMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, LabileHelloMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LabileHelloMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/labile/LabileRoutingPacket.msg:40</tt> by nedtool.
 * <pre>
 * //id =4
 * packet LabileRREPAckPacket extends PacketId
 * {
 * }
 * </pre>
 */
class LabileRREPAckPacket : public ::PacketId
{
  protected:

  private:
    void copy(const LabileRREPAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabileRREPAckPacket&);

  public:
    LabileRREPAckPacket(const char *name=NULL, int kind=0);
    LabileRREPAckPacket(const LabileRREPAckPacket& other);
    virtual ~LabileRREPAckPacket();
    LabileRREPAckPacket& operator=(const LabileRREPAckPacket& other);
    virtual LabileRREPAckPacket *dup() const {return new LabileRREPAckPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, LabileRREPAckPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LabileRREPAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/labile/LabileRoutingPacket.msg:45</tt> by nedtool.
 * <pre>
 * //id =3
 * packet LabileRERRPacket extends PacketId
 * {
 *     bool flagN;
 *     int destCount;
 *     string unreachableDestAddr[];
 *     unsigned long unreachableDestSeqNum[];
 * }
 * </pre>
 */
class LabileRERRPacket : public ::PacketId
{
  protected:
    bool flagN_var;
    int destCount_var;
    opp_string *unreachableDestAddr_var; // array ptr
    unsigned int unreachableDestAddr_arraysize;
    unsigned long *unreachableDestSeqNum_var; // array ptr
    unsigned int unreachableDestSeqNum_arraysize;

  private:
    void copy(const LabileRERRPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabileRERRPacket&);

  public:
    LabileRERRPacket(const char *name=NULL, int kind=0);
    LabileRERRPacket(const LabileRERRPacket& other);
    virtual ~LabileRERRPacket();
    LabileRERRPacket& operator=(const LabileRERRPacket& other);
    virtual LabileRERRPacket *dup() const {return new LabileRERRPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getFlagN() const;
    virtual void setFlagN(bool flagN);
    virtual int getDestCount() const;
    virtual void setDestCount(int destCount);
    virtual void setUnreachableDestAddrArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestAddrArraySize() const;
    virtual const char * getUnreachableDestAddr(unsigned int k) const;
    virtual void setUnreachableDestAddr(unsigned int k, const char * unreachableDestAddr);
    virtual void setUnreachableDestSeqNumArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestSeqNumArraySize() const;
    virtual unsigned long getUnreachableDestSeqNum(unsigned int k) const;
    virtual void setUnreachableDestSeqNum(unsigned int k, unsigned long unreachableDestSeqNum);
};

inline void doPacking(cCommBuffer *b, LabileRERRPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LabileRERRPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LABILEROUTINGPACKET_M_H_

