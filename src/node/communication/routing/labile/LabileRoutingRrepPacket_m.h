//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/labile/LabileRoutingRrepPacket.msg.
//

#ifndef _LABILEROUTINGRREPPACKET_M_H_
#define _LABILEROUTINGRREPPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PacketId_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/routing/labile/LabileRoutingRrepPacket.msg:20</tt> by nedtool.
 * <pre>
 * //id =2
 * packet LabileRREPPacket extends PacketId
 * {
 *     bool flagR;
 *     bool flagA;
 *     int prefixSz;
 *     int hopCount;
 *     int weakLinks;
 *     string originator;
 *     unsigned long destinationSeqNum;
 *     string destinationLABILE;
 *     double lifetime;
 * }
 * </pre>
 */
class LabileRREPPacket : public ::PacketId
{
  protected:
    bool flagR_var;
    bool flagA_var;
    int prefixSz_var;
    int hopCount_var;
    int weakLinks_var;
    opp_string originator_var;
    unsigned long destinationSeqNum_var;
    opp_string destinationLABILE_var;
    double lifetime_var;

  private:
    void copy(const LabileRREPPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabileRREPPacket&);

  public:
    LabileRREPPacket(const char *name=NULL, int kind=0);
    LabileRREPPacket(const LabileRREPPacket& other);
    virtual ~LabileRREPPacket();
    LabileRREPPacket& operator=(const LabileRREPPacket& other);
    virtual LabileRREPPacket *dup() const {return new LabileRREPPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getFlagR() const;
    virtual void setFlagR(bool flagR);
    virtual bool getFlagA() const;
    virtual void setFlagA(bool flagA);
    virtual int getPrefixSz() const;
    virtual void setPrefixSz(int prefixSz);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getWeakLinks() const;
    virtual void setWeakLinks(int weakLinks);
    virtual const char * getOriginator() const;
    virtual void setOriginator(const char * originator);
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
    virtual const char * getDestinationLABILE() const;
    virtual void setDestinationLABILE(const char * destinationLABILE);
    virtual double getLifetime() const;
    virtual void setLifetime(double lifetime);
};

inline void doPacking(cCommBuffer *b, LabileRREPPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LabileRREPPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LABILEROUTINGRREPPACKET_M_H_

