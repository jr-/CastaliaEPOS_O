//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/REL/RELRoutingRrepPacket.msg.
//

#ifndef _RELROUTINGRREPPACKET_M_H_
#define _RELROUTINGRREPPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PacketId_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/routing/REL/RELRoutingRrepPacket.msg:21</tt> by nedtool.
 * <pre>
 * //id = 6
 * packet RELRREPPacket extends PacketId
 * {
 *     int hopCount;
 *     int linkCost;
 *     int energy;
 *     string originator;
 *     unsigned long destinationSeqNum;
 *     string destinationREL;
 *     double lifetime;
 * }
 * </pre>
 */
class RELRREPPacket : public ::PacketId
{
  protected:
    int hopCount_var;
    int linkCost_var;
    int energy_var;
    opp_string originator_var;
    unsigned long destinationSeqNum_var;
    opp_string destinationREL_var;
    double lifetime_var;

  private:
    void copy(const RELRREPPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RELRREPPacket&);

  public:
    RELRREPPacket(const char *name=NULL, int kind=0);
    RELRREPPacket(const RELRREPPacket& other);
    virtual ~RELRREPPacket();
    RELRREPPacket& operator=(const RELRREPPacket& other);
    virtual RELRREPPacket *dup() const {return new RELRREPPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getLinkCost() const;
    virtual void setLinkCost(int linkCost);
    virtual int getEnergy() const;
    virtual void setEnergy(int energy);
    virtual const char * getOriginator() const;
    virtual void setOriginator(const char * originator);
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
    virtual const char * getDestinationREL() const;
    virtual void setDestinationREL(const char * destinationREL);
    virtual double getLifetime() const;
    virtual void setLifetime(double lifetime);
};

inline void doPacking(cCommBuffer *b, RELRREPPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RELRREPPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _RELROUTINGRREPPACKET_M_H_

