# This scenario models an office building:
# * traffic (dataPeriod):
## 10% of nodes at 300ms
## 20% of nodes at 1s
## 60% of nodes at 10s
## 10% of nodes at 1min

# * placement: LISHA (14 nodes), SSB (40 nodes) and TWIST (222 nodes)
# * static nodes
# * noisy channel = same as industry
# * initial battery charge:
# two AA batteries (18720J) for 1min nodes and 50% of 10s nodes
# infinite battery for remaining nodes

# Interest variables:
# TXPower ${0dBm, 7dBm}
# SyncPeriod:
## average of dataPeriods for asyncMAC [Part of scenario]
## interest variable for syncMACs
# DutyCycle:
## Vary to assure DeliveryRatio
## topology-dependent for FTTSTP

# Evaluation metrics:
# DeliveryRatio (Must be 100%: sanity check) if not 100%, indicates segmentation is needed. What is the minimum number of segments?
# Estimated network lifetime
# EnergyNormalized (energy/node/simulationTime)
# BytesProportion
# LatencyMax
# LatencyMean

[General]

include ../Parameters/Castalia.ini

repeat = 1

########################
## Node map           ##
########################
# An auxiliary script generates the deployments
include office_deployment.ini

.radioRange = ${radioRange = 35m, 18m}

seed-set = ${seed=11562}#SEEDTOREPLACE

########################
## Radio           #####
########################
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2538.txt"
SN.node[*].Communication.Radio.symbolsForRSSI = 8
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
SN.node[*].Communication.Radio.TxOutputPower = ${TxPower="7dBm", "0dBm"}

constraint = (($radioRange) >= ($maxInterNodeSpacing)) && (((($TxPower) == "7dBm") && (($radioRange) == 35m)) || ((($TxPower) == "0dBm") && (($radioRange) == 18m)))

########################
## Wireless Channel   ##
########################
SN.wirelessChannel.onlyStaticNodes = true
SN.wirelessChannel.sigma = 4
SN.wirelessChannel.bidirectionalSigma = 1
SN.wirelessChannel.pathLossExponent = 2.4

########################
## Application        ##
########################
SN.node[*].ApplicationName = "GeoSync"

.dataPeriod = ${dataPeriod = 300ms} # Just to distributeStartupDelay
include distributeStartupDelay.ini

SN.node[*].Application.dataPacketLimit = 0
sim-time-limit = ${simTime=30min}
SN.node[*].Application.packetTimeLimit = ${($simTime) - 1min}

SN.node[*].Application.ptpPeriod = ${syncPeriod = 12s}
SN.node[*].Application.hecopsPeriod = ${syncPeriod}

########################
## Node             ####
########################
# Sink must startup first to configure its coordinates
SN.node[0].startupOffset = 0
SN.node[0].startupRandomization = 0
SN.node[*].startupOffset = 0.001
SN.node[*].startupRandomization = 0

########################
## Resource Manager ####
########################
SN.node[*].ResourceManager.sigmaCPUClockDrift = 0.0000133 # Adjust the clock drift between nodes.
                                                          # 0 means all the clocks are always perfectly synchronized
                                                          # Drift is caped at 3*sigma, so 0.0000133 gives at most +-39.9ppm
SN.node[*].ResourceManager.temperature = 25C
SN.node[*].ResourceManager.temperatureModelFile = "../Parameters/PhysicalProcess/temperature_model.txt"
SN.node[*].ResourceManager.baselineNodePower = 0 # CC2538 considers CPU power as radio sleep power

########################
## Traces           ####
########################
SN.wirelessChannel.collectTraceInfo = false
SN.node[*].Communication.Radio.collectTraceInfo = false
SN.node[*].Communication.MAC.collectTraceInfo = false
SN.node[*].Communication.Routing.collectTraceInfo = false
SN.node[*].Application.collectTraceInfo = false
SN.node[*].SensorManager.collectTraceInfo = false
SN.node[*].ResourceManager.collectTraceInfo = false
SN.debugInfoFileName = "Castalia-Trace-${configname}-${runnumber}.txt"
**.vector-recording = false
SN.node[*].Communication.Radio.pcapFile = "" #"trace-${configname}-${runnumber}.pcap" # Write a log of network traffic in pcap format
                                                                                  # Set to an empty string to disable
                                                                                  # Replaces existing file

############################
## TSTP Common Configs #####
############################
[Config TSTPROUTING]
SN.node[*].Communication.RoutingProtocolName = "TSTP"
SN.node[*].Application.ptpPeriod = 0 # TSTP does not use application-level PTP
SN.node[*].Application.ptpMaster = false # TSTP does not use application-level PTP
SN.node[*].Application.hecopsPeriod = 0 # TSTP does not use application-level HECOPS
SN.node[*].Communication.Routing.radioRange = ${radioRange} # Packets arriving from farther than this distance are discarded to avoid radio range assymetry
SN.node[*].Communication.Routing.dropExpired = true # Whether to drop expired packets or try to send them forever
SN.node[*].Communication.Routing.usePtpExplicitSync = true # Enable/disable explicit PTP
SN.node[*].Communication.Routing.keepAlivePeriod = ${$syncPeriod} # Set to 0 to disable keep alives
SN.node[*].Communication.Routing.ptpExplicitSyncPeriod = ${syncPeriod}
SN.node[*].Communication.Routing.useExpiryMetric = true
SN.node[*].Communication.Routing.useRandomMetric = false
SN.node[*].Communication.Routing.useEffortMetric = true
SN.node[*].Communication.Routing.useOldExpiryMetric = false
SN.node[*].Communication.Routing.startSynchronized = true
SN.node[*].Communication.Routing.anchor = true

SN.node[*].Communication.Routing.startWithKeysEstablished = true
SN.node[*].Communication.Routing.keyManagerPeriod = 0s
SN.node[*].Communication.Routing.securityTimeWindow = ${simTime}
SN.node[*].Communication.Routing.encrypt = true

########################
## Configs         #####
########################
[Config ASYNCTSTP]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NED"
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
SN.node[*].Communication.MAC.NMF = ${10,50,250}
#SN.node[*].Communication.MAC.period = ${macPeriod = (((($expiry)) / ((($hops) + 1) * ($betha)) - 4256us - 1079us) / 3) / 2}
#SN.node[*].Communication.MAC.dutyCycle = ${DC = 0.1, 0.2, 0.5}
SN.node[*].Communication.MAC.dataListenMarginMultiplier = 2
SN.node[*].Communication.MAC.enableSynchronousOptimization = false
SN.node[*].Communication.MAC.alwaysTxData = true # If true, data frames are sent even in explicit ACK's
SN.node[*].Communication.MAC.randomBackoff = true
SN.node[*].Communication.MAC.enableCrc = false # Enable/disable CRC checking/computation at the two last bytes of each frame

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec

[Config TSTPNOMF]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NOMF_NED"
SN.node[*].Communication.Radio.stateAfterTX = "RX"

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
