# This scenario models an environment monitoring WSN:
# * sparse traffic (dataPeriod) ${1, 5, 10, 15}min
# * regular placement according to paper X on a [1kmX1km] or [500mX500m] field
## Sink at the center for TSTP
## Sink equidistant from baricenter for FTTSTP
# * static nodes
# * clean channel = symmetric, range ~= 100m, free of interference
# * initial battery charge: two AA batteries (18720J)

# Interest variables:
# TXPower ${0dBm, 7dBm}
# SyncPeriod:
## 0.5*dataPeriod for asyncMAC [Part of scenario]
## interest variable for syncMACs
# DutyCycle:
## n of hops and data period gives capacity
## double capacity for TSTP [Part of scenario]
## topology-dependent for FTTSTP
## DutyCycle such that latency is enough

# Evaluation metrics:
# DeliveryRatio (Must be 100%: sanity check)
# Estimated network lifetime
# EnergyNormalized (energy/node/simulationTime)
# BytesProportion
# LatencyMax
# LatencyMean

[General]

include ../Parameters/Castalia.ini

repeat = 1

########################
## Node map           ##
########################
# Deployment looks like this:

# 000   001   002   003   004   005   006   007   008   009   010
#    011   012   013   014   015   016   017   018   019   020
# 021   022   023   024   025   026   027   028   029   030   031
#    032   033   034   035   036   037   038   039   040   041
# 042   043   044   045   046   047   048   049   050   051   052
#    053   054   055   056   057   058   059   060   061   062
# 063   064   065   066   067   068   069   070   071   072   073
#    074   075   076   077   078   079   080   081   082   083
# 084   085   086   087   088   089   090   091   092   093   094
#    095   096   097   098   099   100   101   102   103   104
# 105   106   107   108   109   110   111   112   113   114   115

.nodesInEvenLines = ${nodesInEvenLines = 11}
SN.numNodes = ${nodes = ceil(($nodesInEvenLines) / 2) * ($nodesInEvenLines) + floor(($nodesInEvenLines) / 2) * ($nodesInEvenLines - 1)}

# List of sinks: This has to be set manually. Remember to adjust all the array indexes in this file that refer to the sink
SN.node[47].Communication.Routing.sink = true

.fxy = ${fxy = 1000, 500}
SN.field_x = ${fxy}
SN.field_y = ${fxy}
SN.deployment = "equidistant_${nodesInEvenLines}x${nodesInEvenLines}"

.radioRange = ${radioRange = 143m, 60m}
.maxHops = ${maxHops = 8}
.hops = ${hops = pow($maxHops,2)}

# The seed is set to a random number by run.sh
seed-set = ${seed=24370}#SEEDTOREPLACE

########################
## Radio           #####
########################
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2538.txt"
SN.node[*].Communication.Radio.symbolsForRSSI = 8
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
SN.node[*].Communication.Radio.TxOutputPower = ${TxPower="7dBm", "0dBm"}

constraint = ((((($TxPower) == "7dBm") && (($radioRange) == 143m)) || ((($TxPower) == "0dBm") && (($radioRange) == 60m)))) && (($radioRange) > ((($fxy) * 1m) / ($nodesInEvenLines - 1)))

########################
## Wireless Channel   ##
########################
SN.wirelessChannel.onlyStaticNodes = true
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
SN.wirelessChannel.pathLossExponent = 2.0 # Free Space

########################
## Application        ##
########################
SN.node[*].ApplicationName = "GeoSync"
SN.node[47].Application.dataPeriod = 0s
SN.node[*].Application.dataPeriod = ${dataPeriod=60s, 300s, 600s}#, 900s}

include distributeStartupDelay.ini

SN.node[*].Application.dataPacketLimit = 0
sim-time-limit = ${simTime=30min}

SN.node[*].Application.packetTimeLimit = ${($simTime) - ($dataPeriod)}


SN.node[*].Application.ptpPeriod = ${syncPeriod = ($dataPeriod) / 2}
SN.node[*].Application.hecopsPeriod = ${syncPeriod}

########################
## Node             ####
########################
# Sink must startup first to configure its coordinates
SN.node[47].startupOffset = 0
SN.node[47].startupRandomization = 0
SN.node[*].startupOffset = 0.001
SN.node[*].startupRandomization = 0

########################
## Resource Manager ####
########################
SN.node[*].ResourceManager.sigmaCPUClockDrift = 0.0000133 # Adjust the clock drift between nodes.
                                                          # 0 means all the clocks are always perfectly synchronized
                                                          # Drift is caped at 3*sigma, so 0.0000133 gives at most +-39.9ppm
SN.node[*].ResourceManager.temperature = 25C
SN.node[*].ResourceManager.temperatureModelFile = "../Parameters/PhysicalProcess/temperature_model.txt"
SN.node[*].ResourceManager.baselineNodePower = 0 # CC2538 considers CPU power as radio sleep power
SN.node[*].ResourceManager.initialEnergy = 18720

########################
## Traces           ####
########################
SN.wirelessChannel.collectTraceInfo = false
SN.node[*].Communication.Radio.collectTraceInfo = false
SN.node[*].Communication.MAC.collectTraceInfo = false
SN.node[*].Communication.Routing.collectTraceInfo = false
SN.node[*].Application.collectTraceInfo = false
SN.node[*].SensorManager.collectTraceInfo = false
SN.node[*].ResourceManager.collectTraceInfo = false
SN.debugInfoFileName = "Castalia-Trace-${configname}-${runnumber}.txt"
**.vector-recording = false
SN.node[*].Communication.Radio.pcapFile = "" #"trace-${configname}-${runnumber}.pcap" # Write a log of network traffic in pcap format
                                                                                  # Set to an empty string to disable
                                                                                  # Replaces existing file

############################
## TSTP Common Configs #####
############################
[Config TSTPROUTING]
SN.node[*].Communication.RoutingProtocolName = "TSTP"
SN.node[*].Application.ptpPeriod = 0 # TSTP does not use application-level PTP
SN.node[*].Application.ptpMaster = false # TSTP does not use application-level PTP
SN.node[*].Application.hecopsPeriod = 0 # TSTP does not use application-level HECOPS
SN.node[*].Communication.Routing.radioRange = ${radioRange} # Packets arriving from farther than this distance are discarded to avoid radio range assymetry
SN.node[*].Communication.Routing.dropExpired = true # Whether to drop expired packets or try to send them forever
SN.node[*].Communication.Routing.usePtpExplicitSync = true # Enable/disable explicit PTP
SN.node[*].Communication.Routing.keepAlivePeriod = ${syncPeriod} # Set to 0 to disable keep alives
SN.node[*].Communication.Routing.ptpExplicitSyncPeriod = ${syncPeriod}
SN.node[*].Communication.Routing.expiry = ${dataPeriod}
SN.node[*].Communication.Routing.useExpiryMetric = true
SN.node[*].Communication.Routing.useRandomMetric = false
SN.node[*].Communication.Routing.useEffortMetric = true
SN.node[*].Communication.Routing.useOldExpiryMetric = false
SN.node[*].Communication.Routing.startSynchronized = true
SN.node[*].Communication.Routing.anchor = true

SN.node[*].Communication.Routing.startWithKeysEstablished = true
SN.node[*].Communication.Routing.keyManagerPeriod = 0s
SN.node[*].Communication.Routing.securityTimeWindow = ${simTime}
SN.node[*].Communication.Routing.encrypt = true

########################
## Configs         #####
########################
[Config ASYNCTSTP]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NED"
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
SN.node[*].Communication.MAC.NMF = ${10,50,250}
#SN.node[*].Communication.MAC.period = ${macPeriod = (((($dataPeriod)) / ((($hops) + 1) * ($betha)) - 4256us - 1079us) / 3) / 2} 
#SN.node[*].Communication.MAC.dutyCycle = ${DC = 0.01}#, 0.1, 0.2}
SN.node[*].Communication.MAC.dataListenMarginMultiplier = 2
SN.node[*].Communication.MAC.enableSynchronousOptimization = false
SN.node[*].Communication.MAC.alwaysTxData = true # If true, data frames are sent even in explicit ACK's
SN.node[*].Communication.MAC.randomBackoff = true
SN.node[*].Communication.MAC.enableCrc = false # Enable/disable CRC checking/computation at the two last bytes of each frame

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec

[Config TSTPNOMF]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NOMF_NED"
SN.node[*].Communication.Radio.stateAfterTX = "RX"

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
