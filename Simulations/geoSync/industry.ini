[General]

# This scenario models a machine in an industrial environment:
# * tight traffic (dataPeriod) ${1, 50, 100}ms
# * star topology with ${2..10} nodes on a 15mX15m and 30mX30m field
## Sink at the center for TSTP
## Sink equidistant from baricenter for FTTSTP
# * static nodes
# * noisy channel, range ~= 30m
# * initial battery charge: two AA batteries (18720J)

# Interest variables:
# TXPower ${0dBm, 7dBm}
# SyncPeriod:
## 0.5*dataPeriod for asyncMAC [Part of scenario] DONT CARE RBMAC
## interest variable for syncMACs
# DutyCycle:
## n of hops and data period gives capacity
## double capacity for TSTP [Part of scenario]
## topology-dependent for FTTSTP
## DutyCycle such that latency is enough

# Evaluation metrics:
# DeliveryRatio (Must be 100%: sanity check)
# Estimated network lifetime
# EnergyNormalized (energy/node/simulationTime)
# BytesProportion
# LatencyMax
# LatencyMean

repeat = 1

include ../Parameters/Castalia.ini

########################
## Node map           ##
########################
.radioRange = ${radioRange=35m,18m}

SN.numNodes = ${nodes=2..10}
SN.node.field_x = ${fxy = 15, 30}
SN.node.field_y = ${fxy}
SN.deployment = "uniform"

SN.node[0].xCoor = ${($fxy) / 2}
SN.node[0].yCoor = ${($fxy) / 2}
SN.node[0].forceLocation = true

seed-set = ${seed=3739}#SEEDTOREPLACE

########################
## Radio           #####
########################
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2538.txt"
SN.node[*].Communication.Radio.symbolsForRSSI = 8
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
SN.node[*].Communication.Radio.TxOutputPower = ${TxPower="7dBm", "0dBm"}

constraint = (((($TxPower) == "7dBm") && (($radioRange) == 35m)) || ((($TxPower) == "0dBm") && (($radioRange) == 18m)))

########################
## Wireless Channel   ##
########################
SN.wirelessChannel.onlyStaticNodes = true
SN.wirelessChannel.sigma = 4
SN.wirelessChannel.bidirectionalSigma = 1
SN.wirelessChannel.pathLossExponent = 2.4

########################
## Application        ##
########################
SN.node[*].ApplicationName = "GeoSync"
SN.node[0].Application.dataPeriod = 0s
SN.node[*].Application.dataPeriod = ${dataPeriod=1ms, 50ms, 100ms}

include distributeStartupDelay.ini

SN.node[*].Application.dataPacketLimit = 10
sim-time-limit = ${simTime=10s}

SN.node[*].Application.ptpPeriod = ${syncPeriod=3s}
SN.node[*].Application.hecopsPeriod = ${syncPeriod}


########################
## Node             ####
########################
# Sink must startup first to configure its coordinates
SN.node[0].startupOffset = 0
SN.node[0].startupRandomization = 0
SN.node[*].startupOffset = 0.001
SN.node[*].startupRandomization = 0

########################
## Resource Manager ####
########################
SN.node[*].ResourceManager.sigmaCPUClockDrift = 0.0000133 # Adjust the clock drift between nodes.
                                                          # 0 means all the clocks are always perfectly synchronized
                                                          # Drift is caped at 3*sigma, so 0.0000133 gives at most +-39.9ppm
SN.node[*].ResourceManager.temperature = 25C
SN.node[*].ResourceManager.temperatureModelFile = "../Parameters/PhysicalProcess/temperature_model.txt"
SN.node[*].ResourceManager.baselineNodePower = 0 # CC2538 considers CPU power as radio sleep power
SN.node[*].ResourceManager.initialEnergy = 18720

########################
## Traces           ####
########################
SN.wirelessChannel.collectTraceInfo = false
SN.node[*].Communication.Radio.collectTraceInfo = false
SN.node[*].Communication.MAC.collectTraceInfo = false
SN.node[*].Communication.Routing.collectTraceInfo = false
SN.node[*].Application.collectTraceInfo = false
SN.node[*].SensorManager.collectTraceInfo = false
SN.node[*].ResourceManager.collectTraceInfo = false
SN.debugInfoFileName = "Castalia-Trace-${configname}-${runnumber}.txt"
**.vector-recording = false
SN.node[*].Communication.Radio.pcapFile = "" #"trace-${configname}-${runnumber}.pcap" # Write a log of network traffic in pcap format
                                                                                  # Set to an empty string to disable
                                                                                  # Replaces existing file

############################
## TSTP Common Configs #####
############################
[Config TSTPROUTING]
SN.node[*].Communication.RoutingProtocolName = "TSTP"
SN.node[*].Application.ptpPeriod = 0 # TSTP does not use application-level PTP
SN.node[*].Application.ptpMaster = false # TSTP does not use application-level PTP
SN.node[*].Application.hecopsPeriod = 0 # TSTP does not use application-level HECOPS
SN.node[*].Communication.Routing.radioRange = ${radioRange} # Packets arriving from farther than this distance are discarded to avoid radio range assymetry
SN.node[*].Communication.Routing.dropExpired = true # Whether to drop expired packets or try to send them forever
SN.node[*].Communication.Routing.usePtpExplicitSync = true # Enable/disable explicit PTP
SN.node[*].Communication.Routing.keepAlivePeriod = ${syncPeriod} # Set to 0 to disable keep alives
SN.node[*].Communication.Routing.ptpExplicitSyncPeriod = ${syncPeriod}
SN.node[*].Communication.Routing.expiry = ${dataPeriod}
SN.node[*].Communication.Routing.useExpiryMetric = true
SN.node[*].Communication.Routing.useRandomMetric = false
SN.node[*].Communication.Routing.useEffortMetric = true
SN.node[*].Communication.Routing.useOldExpiryMetric = false
SN.node[*].Communication.Routing.startSynchronized = true
SN.node[*].Communication.Routing.anchor = true

SN.node[*].Communication.Routing.startWithKeysEstablished = true
SN.node[*].Communication.Routing.keyManagerPeriod = 0s
SN.node[*].Communication.Routing.securityTimeWindow = ${simTime}
SN.node[*].Communication.Routing.encrypt = true

########################
## Configs         #####
########################
[Config ASYNCTSTP]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NED"
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"
#SN.node[*].Communication.MAC.period = ${macPeriod = (((($dataPeriod)) / ((($hops) + 1) * ($betha)) - 4256us - 1079us) / 3) / 2} 
SN.node[*].Communication.MAC.dutyCycle = ${DC = 0.2, 0.5, 0.7}
SN.node[*].Communication.MAC.dataListenMarginMultiplier = 2
SN.node[*].Communication.MAC.enableSynchronousOptimization = false
SN.node[*].Communication.MAC.alwaysTxData = true # If true, data frames are sent even in explicit ACK's
SN.node[*].Communication.MAC.randomBackoff = true
SN.node[*].Communication.MAC.enableCrc = false # Enable/disable CRC checking/computation at the two last bytes of each frame

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec

[Config TSTPNOMF]
extends = TSTPROUTING
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NOMF_NED"
SN.node[*].Communication.Radio.stateAfterTX = "RX"

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
